export const traceTypeFlag = (flag?: number) => {
  if (flag === 1) return 'Any';
  if (flag === 2) return 'Unknown';
  if (flag === 4) return 'String';
  if (flag === 8) return 'Number';
  if (flag === 16) return 'Boolean';
  if (flag === 32) return 'Enum';
  if (flag === 64) return 'BigInt';
  if (flag === 128) return 'StringLiteral';
  if (flag === 256) return 'NumberLiteral';
  if (flag === 512) return 'BooleanLiteral';
  if (flag === 1024) return 'EnumLiteral';
  if (flag === 2048) return 'BigIntLiteral';
  if (flag === 4096) return 'ESSymbol';
  if (flag === 8192) return 'UniqueESSymbol';
  if (flag === 16384) return 'Void';
  if (flag === 32768) return 'Undefined';
  if (flag === 65536) return 'Null';
  if (flag === 131072) return 'Never';
  if (flag === 262144) return 'TypeParameter';
  if (flag === 524288) return 'Object';
  if (flag === 1048576) return 'Union';
  if (flag === 2097152) return 'Intersection';
  if (flag === 4194304) return 'Index';
  if (flag === 8388608) return 'IndexedAccess';
  if (flag === 16777216) return 'Conditional';
  if (flag === 33554432) return 'Substitution';
  if (flag === 67108864) return 'NonPrimitive';
  if (flag === 134217728) return 'TemplateLiteral';
  if (flag === 268435456) return 'StringMapping';
  if (flag === 2944) return 'Literal';
  if (flag === 109440) return 'Unit';
  if (flag === 384) return 'StringOrNumberLiteral';
  if (flag === 117724) return 'PossiblyFalsy';
  if (flag === 402653316) return 'StringLike';
  if (flag === 296) return 'NumberLike';
  if (flag === 2112) return 'BigIntLike';
  if (flag === 528) return 'BooleanLike';
  if (flag === 1056) return 'EnumLike';
  if (flag === 12288) return 'ESSymbolLike';
  if (flag === 49152) return 'VoidLike';
  if (flag === 3145728) return 'UnionOrIntersection';
  if (flag === 3670016) return 'StructuredType';
  if (flag === 8650752) return 'TypeVariable';
  if (flag === 58982400) return 'InstantiableNonPrimitive';
  if (flag === 406847488) return 'InstantiablePrimitive';
  if (flag === 465829888) return 'Instantiable';
  if (flag === 469499904) return 'StructuredOrInstantiable';
  if (flag === 536624127) return 'Narrowable';
  return '___INVALID_TYPE_FLAG___';
};

export const traceKind = (kind?: number) => {
  if (kind === 0) return 'Unknown';
  if (kind === 1) return 'EndOfFileToken';
  if (kind === 2) return 'SingleLineCommentTrivia';
  if (kind === 3) return 'MultiLineCommentTrivia';
  if (kind === 4) return 'NewLineTrivia';
  if (kind === 5) return 'WhitespaceTrivia';
  if (kind === 6) return 'ShebangTrivia';
  if (kind === 7) return 'ConflictMarkerTrivia';
  if (kind === 8) return 'NumericLiteral';
  if (kind === 9) return 'BigIntLiteral';
  if (kind === 10) return 'StringLiteral';
  if (kind === 11) return 'JsxText';
  if (kind === 12) return 'JsxTextAllWhiteSpaces';
  if (kind === 13) return 'RegularExpressionLiteral';
  if (kind === 14) return 'NoSubstitutionTemplateLiteral';
  if (kind === 15) return 'TemplateHead';
  if (kind === 16) return 'TemplateMiddle';
  if (kind === 17) return 'TemplateTail';
  if (kind === 18) return 'OpenBraceToken';
  if (kind === 19) return 'CloseBraceToken';
  if (kind === 20) return 'OpenParenToken';
  if (kind === 21) return 'CloseParenToken';
  if (kind === 22) return 'OpenBracketToken';
  if (kind === 23) return 'CloseBracketToken';
  if (kind === 24) return 'DotToken';
  if (kind === 25) return 'DotDotDotToken';
  if (kind === 26) return 'SemicolonToken';
  if (kind === 27) return 'CommaToken';
  if (kind === 28) return 'QuestionDotToken';
  if (kind === 29) return 'LessThanToken';
  if (kind === 30) return 'LessThanSlashToken';
  if (kind === 31) return 'GreaterThanToken';
  if (kind === 32) return 'LessThanEqualsToken';
  if (kind === 33) return 'GreaterThanEqualsToken';
  if (kind === 34) return 'EqualsEqualsToken';
  if (kind === 35) return 'ExclamationEqualsToken';
  if (kind === 36) return 'EqualsEqualsEqualsToken';
  if (kind === 37) return 'ExclamationEqualsEqualsToken';
  if (kind === 38) return 'EqualsGreaterThanToken';
  if (kind === 39) return 'PlusToken';
  if (kind === 40) return 'MinusToken';
  if (kind === 41) return 'AsteriskToken';
  if (kind === 42) return 'AsteriskAsteriskToken';
  if (kind === 43) return 'SlashToken';
  if (kind === 44) return 'PercentToken';
  if (kind === 45) return 'PlusPlusToken';
  if (kind === 46) return 'MinusMinusToken';
  if (kind === 47) return 'LessThanLessThanToken';
  if (kind === 48) return 'GreaterThanGreaterThanToken';
  if (kind === 49) return 'GreaterThanGreaterThanGreaterThanToken';
  if (kind === 50) return 'AmpersandToken';
  if (kind === 51) return 'BarToken';
  if (kind === 52) return 'CaretToken';
  if (kind === 53) return 'ExclamationToken';
  if (kind === 54) return 'TildeToken';
  if (kind === 55) return 'AmpersandAmpersandToken';
  if (kind === 56) return 'BarBarToken';
  if (kind === 57) return 'QuestionToken';
  if (kind === 58) return 'ColonToken';
  if (kind === 59) return 'AtToken';
  if (kind === 60) return 'QuestionQuestionToken';
  if (kind === 61) return 'BacktickToken';
  if (kind === 62) return 'EqualsToken';
  if (kind === 63) return 'PlusEqualsToken';
  if (kind === 64) return 'MinusEqualsToken';
  if (kind === 65) return 'AsteriskEqualsToken';
  if (kind === 66) return 'AsteriskAsteriskEqualsToken';
  if (kind === 67) return 'SlashEqualsToken';
  if (kind === 68) return 'PercentEqualsToken';
  if (kind === 69) return 'LessThanLessThanEqualsToken';
  if (kind === 70) return 'GreaterThanGreaterThanEqualsToken';
  if (kind === 71) return 'GreaterThanGreaterThanGreaterThanEqualsToken';
  if (kind === 72) return 'AmpersandEqualsToken';
  if (kind === 73) return 'BarEqualsToken';
  if (kind === 74) return 'BarBarEqualsToken';
  if (kind === 75) return 'AmpersandAmpersandEqualsToken';
  if (kind === 76) return 'QuestionQuestionEqualsToken';
  if (kind === 77) return 'CaretEqualsToken';
  if (kind === 78) return 'Identifier';
  if (kind === 79) return 'PrivateIdentifier';
  if (kind === 80) return 'BreakKeyword';
  if (kind === 81) return 'CaseKeyword';
  if (kind === 82) return 'CatchKeyword';
  if (kind === 83) return 'ClassKeyword';
  if (kind === 84) return 'ConstKeyword';
  if (kind === 85) return 'ContinueKeyword';
  if (kind === 86) return 'DebuggerKeyword';
  if (kind === 87) return 'DefaultKeyword';
  if (kind === 88) return 'DeleteKeyword';
  if (kind === 89) return 'DoKeyword';
  if (kind === 90) return 'ElseKeyword';
  if (kind === 91) return 'EnumKeyword';
  if (kind === 92) return 'ExportKeyword';
  if (kind === 93) return 'ExtendsKeyword';
  if (kind === 94) return 'FalseKeyword';
  if (kind === 95) return 'FinallyKeyword';
  if (kind === 96) return 'ForKeyword';
  if (kind === 97) return 'FunctionKeyword';
  if (kind === 98) return 'IfKeyword';
  if (kind === 99) return 'ImportKeyword';
  if (kind === 100) return 'InKeyword';
  if (kind === 101) return 'InstanceOfKeyword';
  if (kind === 102) return 'NewKeyword';
  if (kind === 103) return 'NullKeyword';
  if (kind === 104) return 'ReturnKeyword';
  if (kind === 105) return 'SuperKeyword';
  if (kind === 106) return 'SwitchKeyword';
  if (kind === 107) return 'ThisKeyword';
  if (kind === 108) return 'ThrowKeyword';
  if (kind === 109) return 'TrueKeyword';
  if (kind === 110) return 'TryKeyword';
  if (kind === 111) return 'TypeOfKeyword';
  if (kind === 112) return 'VarKeyword';
  if (kind === 113) return 'VoidKeyword';
  if (kind === 114) return 'WhileKeyword';
  if (kind === 115) return 'WithKeyword';
  if (kind === 116) return 'ImplementsKeyword';
  if (kind === 117) return 'InterfaceKeyword';
  if (kind === 118) return 'LetKeyword';
  if (kind === 119) return 'PackageKeyword';
  if (kind === 120) return 'PrivateKeyword';
  if (kind === 121) return 'ProtectedKeyword';
  if (kind === 122) return 'PublicKeyword';
  if (kind === 123) return 'StaticKeyword';
  if (kind === 124) return 'YieldKeyword';
  if (kind === 125) return 'AbstractKeyword';
  if (kind === 126) return 'AsKeyword';
  if (kind === 127) return 'AssertsKeyword';
  if (kind === 128) return 'AnyKeyword';
  if (kind === 129) return 'AsyncKeyword';
  if (kind === 130) return 'AwaitKeyword';
  if (kind === 131) return 'BooleanKeyword';
  if (kind === 132) return 'ConstructorKeyword';
  if (kind === 133) return 'DeclareKeyword';
  if (kind === 134) return 'GetKeyword';
  if (kind === 135) return 'InferKeyword';
  if (kind === 136) return 'IntrinsicKeyword';
  if (kind === 137) return 'IsKeyword';
  if (kind === 138) return 'KeyOfKeyword';
  if (kind === 139) return 'ModuleKeyword';
  if (kind === 140) return 'NamespaceKeyword';
  if (kind === 141) return 'NeverKeyword';
  if (kind === 142) return 'ReadonlyKeyword';
  if (kind === 143) return 'RequireKeyword';
  if (kind === 144) return 'NumberKeyword';
  if (kind === 145) return 'ObjectKeyword';
  if (kind === 146) return 'SetKeyword';
  if (kind === 147) return 'StringKeyword';
  if (kind === 148) return 'SymbolKeyword';
  if (kind === 149) return 'TypeKeyword';
  if (kind === 150) return 'UndefinedKeyword';
  if (kind === 151) return 'UniqueKeyword';
  if (kind === 152) return 'UnknownKeyword';
  if (kind === 153) return 'FromKeyword';
  if (kind === 154) return 'GlobalKeyword';
  if (kind === 155) return 'BigIntKeyword';
  if (kind === 156) return 'OfKeyword';
  if (kind === 157) return 'QualifiedName';
  if (kind === 158) return 'ComputedPropertyName';
  if (kind === 159) return 'TypeParameter';
  if (kind === 160) return 'Parameter';
  if (kind === 161) return 'Decorator';
  if (kind === 162) return 'PropertySignature';
  if (kind === 163) return 'PropertyDeclaration';
  if (kind === 164) return 'MethodSignature';
  if (kind === 165) return 'MethodDeclaration';
  if (kind === 166) return 'Constructor';
  if (kind === 167) return 'GetAccessor';
  if (kind === 168) return 'SetAccessor';
  if (kind === 169) return 'CallSignature';
  if (kind === 170) return 'ConstructSignature';
  if (kind === 171) return 'IndexSignature';
  if (kind === 172) return 'TypePredicate';
  if (kind === 173) return 'TypeReference';
  if (kind === 174) return 'FunctionType';
  if (kind === 175) return 'ConstructorType';
  if (kind === 176) return 'TypeQuery';
  if (kind === 177) return 'TypeLiteral';
  if (kind === 178) return 'ArrayType';
  if (kind === 179) return 'TupleType';
  if (kind === 180) return 'OptionalType';
  if (kind === 181) return 'RestType';
  if (kind === 182) return 'UnionType';
  if (kind === 183) return 'IntersectionType';
  if (kind === 184) return 'ConditionalType';
  if (kind === 185) return 'InferType';
  if (kind === 186) return 'ParenthesizedType';
  if (kind === 187) return 'ThisType';
  if (kind === 188) return 'TypeOperator';
  if (kind === 189) return 'IndexedAccessType';
  if (kind === 190) return 'MappedType';
  if (kind === 191) return 'LiteralType';
  if (kind === 192) return 'NamedTupleMember';
  if (kind === 193) return 'TemplateLiteralType';
  if (kind === 194) return 'TemplateLiteralTypeSpan';
  if (kind === 195) return 'ImportType';
  if (kind === 196) return 'ObjectBindingPattern';
  if (kind === 197) return 'ArrayBindingPattern';
  if (kind === 198) return 'BindingElement';
  if (kind === 199) return 'ArrayLiteralExpression';
  if (kind === 200) return 'ObjectLiteralExpression';
  if (kind === 201) return 'PropertyAccessExpression';
  if (kind === 202) return 'ElementAccessExpression';
  if (kind === 203) return 'CallExpression';
  if (kind === 204) return 'NewExpression';
  if (kind === 205) return 'TaggedTemplateExpression';
  if (kind === 206) return 'TypeAssertionExpression';
  if (kind === 207) return 'ParenthesizedExpression';
  if (kind === 208) return 'FunctionExpression';
  if (kind === 209) return 'ArrowFunction';
  if (kind === 210) return 'DeleteExpression';
  if (kind === 211) return 'TypeOfExpression';
  if (kind === 212) return 'VoidExpression';
  if (kind === 213) return 'AwaitExpression';
  if (kind === 214) return 'PrefixUnaryExpression';
  if (kind === 215) return 'PostfixUnaryExpression';
  if (kind === 216) return 'BinaryExpression';
  if (kind === 217) return 'ConditionalExpression';
  if (kind === 218) return 'TemplateExpression';
  if (kind === 219) return 'YieldExpression';
  if (kind === 220) return 'SpreadElement';
  if (kind === 221) return 'ClassExpression';
  if (kind === 222) return 'OmittedExpression';
  if (kind === 223) return 'ExpressionWithTypeArguments';
  if (kind === 224) return 'AsExpression';
  if (kind === 225) return 'NonNullExpression';
  if (kind === 226) return 'MetaProperty';
  if (kind === 227) return 'SyntheticExpression';
  if (kind === 228) return 'TemplateSpan';
  if (kind === 229) return 'SemicolonClassElement';
  if (kind === 230) return 'Block';
  if (kind === 231) return 'EmptyStatement';
  if (kind === 232) return 'VariableStatement';
  if (kind === 233) return 'ExpressionStatement';
  if (kind === 234) return 'IfStatement';
  if (kind === 235) return 'DoStatement';
  if (kind === 236) return 'WhileStatement';
  if (kind === 237) return 'ForStatement';
  if (kind === 238) return 'ForInStatement';
  if (kind === 239) return 'ForOfStatement';
  if (kind === 240) return 'ContinueStatement';
  if (kind === 241) return 'BreakStatement';
  if (kind === 242) return 'ReturnStatement';
  if (kind === 243) return 'WithStatement';
  if (kind === 244) return 'SwitchStatement';
  if (kind === 245) return 'LabeledStatement';
  if (kind === 246) return 'ThrowStatement';
  if (kind === 247) return 'TryStatement';
  if (kind === 248) return 'DebuggerStatement';
  if (kind === 249) return 'VariableDeclaration';
  if (kind === 250) return 'VariableDeclarationList';
  if (kind === 251) return 'FunctionDeclaration';
  if (kind === 252) return 'ClassDeclaration';
  if (kind === 253) return 'InterfaceDeclaration';
  if (kind === 254) return 'TypeAliasDeclaration';
  if (kind === 255) return 'EnumDeclaration';
  if (kind === 256) return 'ModuleDeclaration';
  if (kind === 257) return 'ModuleBlock';
  if (kind === 258) return 'CaseBlock';
  if (kind === 259) return 'NamespaceExportDeclaration';
  if (kind === 260) return 'ImportEqualsDeclaration';
  if (kind === 261) return 'ImportDeclaration';
  if (kind === 262) return 'ImportClause';
  if (kind === 263) return 'NamespaceImport';
  if (kind === 264) return 'NamedImports';
  if (kind === 265) return 'ImportSpecifier';
  if (kind === 266) return 'ExportAssignment';
  if (kind === 267) return 'ExportDeclaration';
  if (kind === 268) return 'NamedExports';
  if (kind === 269) return 'NamespaceExport';
  if (kind === 270) return 'ExportSpecifier';
  if (kind === 271) return 'MissingDeclaration';
  if (kind === 272) return 'ExternalModuleReference';
  if (kind === 273) return 'JsxElement';
  if (kind === 274) return 'JsxSelfClosingElement';
  if (kind === 275) return 'JsxOpeningElement';
  if (kind === 276) return 'JsxClosingElement';
  if (kind === 277) return 'JsxFragment';
  if (kind === 278) return 'JsxOpeningFragment';
  if (kind === 279) return 'JsxClosingFragment';
  if (kind === 280) return 'JsxAttribute';
  if (kind === 281) return 'JsxAttributes';
  if (kind === 282) return 'JsxSpreadAttribute';
  if (kind === 283) return 'JsxExpression';
  if (kind === 284) return 'CaseClause';
  if (kind === 285) return 'DefaultClause';
  if (kind === 286) return 'HeritageClause';
  if (kind === 287) return 'CatchClause';
  if (kind === 288) return 'PropertyAssignment';
  if (kind === 289) return 'ShorthandPropertyAssignment';
  if (kind === 290) return 'SpreadAssignment';
  if (kind === 291) return 'EnumMember';
  if (kind === 292) return 'UnparsedPrologue';
  if (kind === 293) return 'UnparsedPrepend';
  if (kind === 294) return 'UnparsedText';
  if (kind === 295) return 'UnparsedInternalText';
  if (kind === 296) return 'UnparsedSyntheticReference';
  if (kind === 297) return 'SourceFile';
  if (kind === 298) return 'Bundle';
  if (kind === 299) return 'UnparsedSource';
  if (kind === 300) return 'InputFiles';
  if (kind === 301) return 'JSDocTypeExpression';
  if (kind === 302) return 'JSDocNameReference';
  if (kind === 303) return 'JSDocAllType';
  if (kind === 304) return 'JSDocUnknownType';
  if (kind === 305) return 'JSDocNullableType';
  if (kind === 306) return 'JSDocNonNullableType';
  if (kind === 307) return 'JSDocOptionalType';
  if (kind === 308) return 'JSDocFunctionType';
  if (kind === 309) return 'JSDocVariadicType';
  if (kind === 310) return 'JSDocNamepathType';
  if (kind === 311) return 'JSDocComment';
  if (kind === 312) return 'JSDocTypeLiteral';
  if (kind === 313) return 'JSDocSignature';
  if (kind === 314) return 'JSDocTag';
  if (kind === 315) return 'JSDocAugmentsTag';
  if (kind === 316) return 'JSDocImplementsTag';
  if (kind === 317) return 'JSDocAuthorTag';
  if (kind === 318) return 'JSDocDeprecatedTag';
  if (kind === 319) return 'JSDocClassTag';
  if (kind === 320) return 'JSDocPublicTag';
  if (kind === 321) return 'JSDocPrivateTag';
  if (kind === 322) return 'JSDocProtectedTag';
  if (kind === 323) return 'JSDocReadonlyTag';
  if (kind === 324) return 'JSDocCallbackTag';
  if (kind === 325) return 'JSDocEnumTag';
  if (kind === 326) return 'JSDocParameterTag';
  if (kind === 327) return 'JSDocReturnTag';
  if (kind === 328) return 'JSDocThisTag';
  if (kind === 329) return 'JSDocTypeTag';
  if (kind === 330) return 'JSDocTemplateTag';
  if (kind === 331) return 'JSDocTypedefTag';
  if (kind === 332) return 'JSDocSeeTag';
  if (kind === 333) return 'JSDocPropertyTag';
  if (kind === 334) return 'SyntaxList';
  if (kind === 335) return 'NotEmittedStatement';
  if (kind === 336) return 'PartiallyEmittedExpression';
  if (kind === 337) return 'CommaListExpression';
  if (kind === 338) return 'MergeDeclarationMarker';
  if (kind === 339) return 'EndOfDeclarationMarker';
  if (kind === 340) return 'SyntheticReferenceExpression';
  if (kind === 341) return 'Count';
  if (kind === 62) return 'FirstAssignment';
  if (kind === 77) return 'LastAssignment';
  if (kind === 63) return 'FirstCompoundAssignment';
  if (kind === 77) return 'LastCompoundAssignment';
  if (kind === 80) return 'FirstReservedWord';
  if (kind === 115) return 'LastReservedWord';
  if (kind === 80) return 'FirstKeyword';
  if (kind === 156) return 'LastKeyword';
  if (kind === 116) return 'FirstFutureReservedWord';
  if (kind === 124) return 'LastFutureReservedWord';
  if (kind === 172) return 'FirstTypeNode';
  if (kind === 195) return 'LastTypeNode';
  if (kind === 18) return 'FirstPunctuation';
  if (kind === 77) return 'LastPunctuation';
  if (kind === 0) return 'FirstToken';
  if (kind === 156) return 'LastToken';
  if (kind === 2) return 'FirstTriviaToken';
  if (kind === 7) return 'LastTriviaToken';
  if (kind === 8) return 'FirstLiteralToken';
  if (kind === 14) return 'LastLiteralToken';
  if (kind === 14) return 'FirstTemplateToken';
  if (kind === 17) return 'LastTemplateToken';
  if (kind === 29) return 'FirstBinaryOperator';
  if (kind === 77) return 'LastBinaryOperator';
  if (kind === 232) return 'FirstStatement';
  if (kind === 248) return 'LastStatement';
  if (kind === 157) return 'FirstNode';
  if (kind === 301) return 'FirstJSDocNode';
  if (kind === 333) return 'LastJSDocNode';
  if (kind === 314) return 'FirstJSDocTagNode';
  if (kind === 333) return 'LastJSDocTagNode';
  return '___INVALID_KIND___';
};

export const getPreviousLine = (text: string, start: number) => {
  const idx1 = text.lastIndexOf('\n', start);
  const idx2 = text.lastIndexOf('\n', idx1 - 1);
  return text.substring(idx2 + 1, idx1);
};
